페이징 처리
페이징처리를 하려먼 SQL을 변경해야되는데 필요한 파라미터가 뭐가 있을까 생각
페이지 번호(pageNum), 한 페이지당 몇 개의 데이터를 보여줄지 (amount) = 10
1 페이지 1~10   (pageNum-1) * amount < rownum <= pageNum * amount
2 페이지 11~20  
-->클래스로 관리합니다.

<![CDATA[ SQL  구문]]>
SQL 구문 안에 특수문자가 들엉갈 경우 XML 파일에서 잘못 인식하는 경우를 막기 위해 사용하는 처리방법
(Character Data의 줄임말) sql 구문안에 부등호 같은 특수문자가 들어갈 때 사용
xml 태그 만들 때 <select> where bno > 0

화면 밑에 페이지 번호를 표시, 페이지 번호를 클릭할 수 있게 
<1 2 3 4 5>

페이지 처리할 때 필요한 정보들
현재 페이지 번호(pageNum)
이전과 다음으로 이동가능한 링크 표시(prev, next)
화면에서 보여지는 페이지의 시작, 마지막 (start, end)

사용자가 5페이지를 보고 있다. ==> 1~10 페이지
사용자가 19페이지를 보고 있다. ==> 11~20 페이지
페이지 끝번호 계산
endpage :(int)(Math.ceil(현재 페이지번호 / 10.0)) * 10;
현재페이지가 1페이지 : Math.ceil(1 / 10.0 = 0.1) = 1 * 10 = 10
현재페이지가 10페이지 : 10/10.0 1.0 = 10
현재페이지가 11페이지: 11/10.0 1.1 2 * 10 = 20
페이지 시작 번호
페이지 끝번호 계산 후 -9
startpage = endpage - 9
사실 끝번호는 전체 데이터 수 (total) 의 영향을 받는다.
진짜 끝번호는 realend 
realend (int)(Math.ceil((total * 1.0) / amount))
if(realend < endPage){

//페이지 끝번호를 realend로 쓴다.

}

이전 페이지/다음 페이지
이전 페이지 : 현재 페이지 -1 (시작 페이지 번호가 1보다 큰 경우만)
다음 페이지 : 현재 페이지 +1 ( 시작 페이지 번호가 realend보다 작을 때만)

검색 기능 : sql
제목 / 내용 / 작성자

검색 결과가 여러개가 나올 수 있다.
여러개가 나오면 ==> 여러개?? 만약 결과가 200만개 ?? 페이지 처리가 필요

Mybatis를 통해 검색 sql을 작성

검색 조건이 상황에 따라 다르다
사용자가 제목 검색을 한 경우 where title like '%키워드%'
사용자가 내용 검색을 한 경우 where content like '%키워드%'
사용자가 제목 + 내용 검색을 한 경우....

Mybatis의 동적 sql (jstl 태그랑 비슷함)
if, choose, trim, foreach
if는 test 라는 속성과 함께 특정한 조건이 true가 되었을 때
포함된 sql을 사용하고자 할 때 작성한다. 
예를 들어서 우리가 단일항목으로 제목 검색을 하는 상황/ 내용 / 작성자
검색 조건이 T 이면 제목 검색을 할 것이다.
검색 조건이 C 이면 내용 검색을 할 것이다.
검색 조건이 W 이면 작성자 검색을 할 것이다. 검색 조건 : type
<if test="type=='T'.toString()">
   (title like '%'||#{}||'%')
   </if>
<if test="type=='C'.toString()">
  (content like '%'||#{}||'%')
  </if>

  =========
  choose는 여러 상황들 중 하나의 상황에서만 동작합니다. if-else, jstl의 <choose>
  <choose>
  <when test="type == 'T'.toString()">
   (title like '%'||#{}||'%')
   </when>
   <when test="type=='C'.toString()">
  (content like '%'||#{}||'%')
  </when>
  <otherwise>
  ..위에서 아무 조건도 해당되지 않았을 때 ..
  </otherwise>
  </choose>
  
  sql작성을 하는데 bno라는 값이 null이 아니면 where 절을 추가해서 bno 값을 비교하고 싶다
  select * from tbl_board
  <where>
  <if test = "bno != null">
  bno = #{bno}
  </if>
  </where>
  태그 안쪽 sql문이 생성되면 앞에 where 구문이 붙고, 그렇지 않으면 생성되지 않는다.
  bno 값이 존재하는 경우 : select * from tbl_board where bno = xxx;
  bno 값이 null인 경우 : select * from tbl_board
  
  where 절 안에 and 나 or로 조건을 추가하고 싶을 경우
  where bno = xxx and rownum <=10;
  <trim> 태그
  
  <trim prefix="and">
  사용하고 싶은 sql문
  rownum <= 10
  
  </trim>
  and sql
  and rownum <= 10
  prefix, suffix, 속성 사용 가능
  
  <foreach> List, 배열, 맵 등을 이용해서 반복 처리 할 때 사용 하는 태그
  </foreach>
  
  트랙잭션 관리
  쪼개질 수 없는 하나의 작업 단위 : 트랜잭션
  ACID
  A Atomicity 원자성
  하나의 트랜잭션은 모두 하나의 단위로 처리되어야 한다.
  하나의 트랜잭션 안에 a , b 이 두 작업이 포함되어 있는 경우
 a는 성공했지만 b는 실패할 경우 전체가 실패한 것으로 간주하고 원래 상태로 되돌린다.
 a 와 b의 실행 결과를 동일한 결과로 한다.
 두 개 다 모두 성공하던지
 두 개 다 모두 실패하던지
  
  C Consistency 일관성
  트랜잭션이 성공했다면 데이터베이스의 모든 데이터는 일관성을 유지해야 한다.
  트랜잭션으로 처리된 데이터와 다른 데이터 사이에 전혀 차이가 없어야 한다.
  
  I Isolation 격리성
  트랜잭션이 처리되는 중간에 외부에서 간섭할 수 없다.
  
  D Durability 영속성(지속성)
  트랜잭션이 성공적으로 처리가 되면 그 결과는 영속적으로 보관되어야 한다.
  
  정규화 : 중복된 데이터를 제거해서 데이터 저장의 효율을 올린다.
 중복된 데이터를 제거?????
 
 person 
 이름, 주민번호, 주소, 성별, ...
 
 person_name
 이름, 주민번호
 
 person_address
 주소, 주민번호
 
 person_gender
 성별, 주민번호
 student
 이름, 학번, 주민번호, 주소, 성별, ....
 
 student
 
 학번, 주민번호, .....
 
 테이블의 조인을 이용해서 주민번호 컬럼 (외래키)를 이용해서 그 사람의 다른 테이블에 있는 정보를 가져온다.
 where student.주민번호 = person.주민번호
 정규화가 진행될수록 테이블은 점점 순수한 형태가 되어간다. (꼭 필요한 정보만 저장하게 된다.)
 
 데이터를 조회할 때 사람의 이름만 가져오면 상관 없는데 이름, 주소, 성별을 다 가져와야 할 때
 where person_name.주민번호 = person_address.주민번호 = person_gender.주민번호
 
 테이블을 조인한다?? 컴퓨터가 조인이 필요한 테이블을 검색
 컴퓨터가 할 일이 너무 많아짐 ==> 시간도 오래 걸리고, 성능이 저하된다.
 
 다시 테이블을 합쳐서 하나의 테이블에서 검색할 수 있도록 (조인 횟수를 줄인다.)
 반정규화 (어느정도 중복을 허용한다. 대신 조인, 서브쿼리 이용 횟수를 줄인다.)
 
 스프링에서 트랜잭션 기능을 제공
 spring-tx, spring-jdbc, ojdbc
 
 트랜잭션 기능을 사용하기 위해 필요했던 설정을
 pom.xml
  spring-tx, spring-jdbc, ojdbc
  +aop(aspectjrt, aspectjweaver)
  의존성 추가
  
  스프링 설정 파일
  db 관련 설정 빈(dataSource, sqlSessionFactory...)
  namespace 가서 aop, tx 체크
  transactionManager 빈 추가, 
  <tx:annotation-driven/> : 트랜잭션 설정을 어노테이션으로 하겠다
  <aop:aspectj-autoproxy> : aop 설정을 어노테이션으로 하겠다
우리가 사용할 메소드 (트랜잭션 처리하고 싶은 메소드) 위에 @Transactional


REST 방식으로 전환
옛날 방식에서는 우리가 만드는 데이터의 소비자가 웹 브라우저(컴퓨터)
스마트폰(모바일)
서버의 데이터를 소비하는 주체가 웹 브라우저라는 특정한 어플리케이션으로 제한적
==>모바일기기가 많아지면서 모바일의 앱이나 웹도 서버에서 제공하는 데이터를 소비하게 되었다.

과거의 서버의 데이터 제공 대상 : 웹 브라우저
최근 서버의 데이터 제공 대상 : 웹 브라우저 + 수 많은 다양한 기기들(스마트폰)

스마트폰에서는 APP 이라고 불리는 고유한 어플리케이션을 사용해서 데이터를 소비
스마트폰에서 보이는 화면은 더 이상 HTML이 아니다. (자신만의 방법으로 화면을 제공)

REST(Representational State Transger)
하나의 URI는 하나의 고유한 RESOURCE(자원)을 대표하도록 설계
URI : 당신이 원하는 곳의 주소는 여기입니다.
URI : 이곳에 가면 당신이 원하는 것을 찾을 수 있습니다.
"/board/123" 이 주소는 123번 게시물을 위한 유일한 주소
+/GET/POST 데이터를 전달하는 방식까지 추가

REST = URI + GET/POST/PUT/DELETE/....

REST 방식이 되면 가장 먼저 기억해야 하는 것: 서버의 변환
서버가 전송하는 것이 순수한 데이터가 된다.
기존의 컨트롤러에서 데이터를 담아서 JSP와 같은 VIEW로 전달하는 방식이 아니다.

서버가 순수하게 데이터만 전달한다 ==> 많이 사용하는 방식
JSON 방식으로 데이터를 전달한다.
XML 방식(옛날)
프로젝트에서 JSON 방식을 사용하기 위해 라이브러리 추가가 필요합니다.
   작업                        전송방식                   URI
Create(등록)   :  POST         /board/new
Read(조회)     :  GET          /board/{id}
Update(수정)   :  PUT          /board/{id}
Delete(삭졔)   :  DELETE       /board/{id}

REST 방식을 이용해서 댓글 처리를 구현
+AJAX

댓글 테이블
create table tbl_reply (
rno number(10,0),
bno number(10,0) not null,
reply varchar2(1000) not null,
replyer varchar2(50) not null,
replyDate date default sysdate,
updateDate date default sysdate
  );
  
  create sequence seq_reply minvalue 0
  maxvalue 999999999 increment by 1 start with 1 cycle;
  
  alter table tbl_reply add constraint pk_reply primary key (rno);
  
  alter table tbl_reply
  add constraint fk_reply_board foreign key (bno)
  references tbl_board(bno);  
  
  파일 업로드
  
  첨부파일 설정은 프로젝트에 web.xml이 있는 경우에는 web.xml에서 처리해준다.
  스프링 사용 시 MultipartResolver 라는 타입의 객체를 빈으로 등록해서 사용
 web 과 관련된 설정이므로 servlet - context.xml 을 이용해서 빈으로 등록
 
 파일 업로드 시 고려해야 하는 점들
 
 동일한 이름으로 파일이 업로드 되었을 때 기존 파일이 사라진다. (덮어쓰기 해버림)
 네이버 메일에서 파일 업로드 하려고 했더니 zip 이랑 exe 이런 파일 업로드 막아버림
 첨부파일 공격에 대비하기 위해 업로드 파일의 확장자를 제한
 파일의 크기가 너무 큰 경우 사전 처리
 
 파일 이름 중복처리 방법
 하나는 시간을 파일 이름 앞에 붙여서 저장(일반적으로 많이 사용하는 방법)
 또는 년/월/일 단위로 폴더 구조를 만들어서 저장
 
 UUID 범용 고유 식별자(네트워크 상에서 고유성이 보장되는 ID)
 
 이미지 크기가 너무 큰 경우 화면에 그대로 사용할 경우 많은 데이터를 소비해야 한다.
 모바일에서 웹페이지를 여는데 웹페이지에 엄청 큰 이미지 파일이 포함되어 있다면
 이미지 파일의 크기만큼 남은 데이터를 소모
 특별한 경우가 아니면 이미지크기를 줄여서 썸네일처리가 필요하다.
 썸네일 처리는 우리가 직접하지 않고 라이브러리를 가져와서 사용
 
 