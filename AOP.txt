AOP(Aspect oriented programming)
관점 지향 프로그래밍
우리가 구현하고자 하는 기능을
핵심적인 관심사항(핵심적인 기능)  / 공통적인 관심사항(공통적인 기능)
핵심적인 기능들은 실행하고자 하는 기능들이 다 달라요.
그런데 공통적으로 실행하고 싶은 기능들은 겹칠 때
각각의 핵심적인 기능들에 공통적으로 싫애하고 싶은 기능을 같이 실행할 때

학생, 직장인 ==> 객체
 둘 다 아침에 지하철을 탄다. (학생은 학교에 가려고, 직장인은 회사에 가려고)
학생 : 학교에 가서 공부를 한다.
직장인 : 회사에 가서 일을 한다.
둘 다 저녁에 지하철을 타고 집에 온다.
둘 다 집에 와서 발을 닦고 잔다.

학생, 직장인 객체를 프록시로 감싸서 공통적인 기능을 실행하도록 한다.
프록시 패턴 ==> 핵심적인 기능을 하는 객체를 감싸주는 친구
내부적으로는 객체의 핵심적인 기능을 호출한 다음에
프록시 자체에는 공통적인 기능들이 포함되어 있어서

프록시를 실행하게 되면 핵심적인 기능 + 공통적인 기능이 실행이 된다.
사람
아침에 지하철을 탄다.
(핵심적인 기능을 하는 객체)
저녁에 지하철을 탄다.
집에 와서 발 닦고 잔다.

사람을 실행하면 핵심 기능 + 공통 기능이 다 실행된다.

개발자의 입장에서 AOP를 적용하면 기존의 코드를 수정하지 않고 원하는 공통 기능들을
핵심기능과 엮어서 실행시킬수있다
ex...나중에 더이상 버스와 지하철이 아니라 비행기를 타고 다니는 사람이 생겼다
==>aop를 적용허자 않았으면 모든 클래스를 수정해야 했지만
 aop를 적용하면 프록사만 수정하거나 새로운 프록시를 추가하면된다
 
AOP==>용어
Target:개발자가 작성한 핵심 기능을가진 객체(boy,man)
proxy:target을 전체적으로 감싸고 있는 존재(personProxy)
proxy에서 내부적으로 target을 호출,공통적으로 실행이 필요한 부분을 추가
JoinPoint:Target이 가지고 있는 핵심적인기능을 실행하는 메소드
(doSomething())
핵심기능이 두개이상일때 어떤 핵심기능에 공통적인 기능들을 결정할지 정해야한다
그 결정하는 것을 Pointcut이라고 한다.
Target 메소드 중에 어떤 Joinpoint에 공통 기능을 결합할지 결정하는 것을 Pointcut
Aspect : 관심사(추상적인 개념) 우리가 실제로 사용하는 코드는 Advice
Aspect(Advice) + Joinpoint 결합해서 사용을 한다.
Advice : 핵심적인 기능에서 분리해 놓은 코드를 의미한다.
     동작 위치에 따라서 종류가 여러가지가 있다.
   before : target의 joinpoint를 호출하기 전에 실행되는 코드 (버스에 탄다.)
   after-returning : 정상 실행 후에 동작하는 코드
   after-throwing : 예외가 발생한 뒤에 동작하는 코드
   after : 실행 결과에 상관없이 joinpoint가 실행된 후에 동작하는 코드
   around : target의 앞 뒤 상관 없이 실행될 코드를 정의 (제일 강력한 코드)
   
   aop를 위해 필요한 라이브러리
   aspectjrt, aspectjweaver
   
   스프링 + aop 적용시키기
   1. 핵심기능 구현을 위한 인터페이스 작성 (person)
   2. 핵심기능이 구현된 클래스 (Target)을 작성, Target은 인터페이스를 implements
   3. advice를 작성(Aspect)
   4. 스프링 설정 파일을 작성
      Target 클래스를 스프링의 bean으로 등록
      advice를 구현한 클래스를 스프링의 bean으로 등록
      aop 설정(joinpoint, pointcut 등)
      
